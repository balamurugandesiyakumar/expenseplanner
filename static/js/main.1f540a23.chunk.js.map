{"version":3,"sources":["expense-list/ExpenseList.js","Routes.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseList","props","handleChange","date","setState","startDate","handleSubmit","e","preventDefault","state","getName","value","getAmount","disabled","expDate","dateFormat","expName","expAmount","parseInt","typeName","modalTitle","totalIncome","totalSpending","data","id","expense","length","expdate","expname","expamount","type","dispatch","successMsg","setTimeout","show","deleteExpense","explist","expenses","i","addIncome","closeModal","addSpending","Date","this","totalAmount","className","map","key","style","color","class","onClick","display","onSubmit","selected","onChange","ref","input","required","Component","connect","Routes","basename","path","exact","expReducer","action","concat","filter","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1f540a23.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport dateFormat from \"dateformat\";\r\nimport { connect } from 'react-redux';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport './expenselist.scss';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        expense: state\r\n    }\r\n}\r\n\r\nclass ExpenseList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            startDate: new Date(),\r\n            modalTitle: '',\r\n            show: false,\r\n            totalIncome: 0,\r\n            totalSpending: 0,\r\n            disabled: false,\r\n            successMsg: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const expenses = this.props.expense;\r\n        for (let i = 0; i < expenses.length; i++) {\r\n            if (expenses[i].type === 'income') {\r\n                this.setState({ totalIncome: this.state.totalIncome + expenses[i].expamount })\r\n            } else if (expenses[i].type === 'spending') {\r\n                this.setState({ totalSpending: this.state.totalSpending + expenses[i].expamount })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    handleChange = date => {\r\n        debugger;\r\n\r\n        this.setState({\r\n            startDate: date\r\n        });\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.startDate !== '' && this.getName.value !== '' && this.getAmount.value !== '') {\r\n            this.setState({ disabled: true })\r\n            const expDate = dateFormat(this.state.startDate, \"mmm d yyyy\");\r\n\r\n            const expName = this.getName.value;\r\n            const expAmount = parseInt(this.getAmount.value);\r\n\r\n            let typeName = '';\r\n            if (this.state.modalTitle === 'Add Income') {\r\n                typeName = 'income';\r\n                this.setState({ totalIncome: this.state.totalIncome + expAmount })\r\n            } else {\r\n                typeName = 'spending';\r\n                this.setState({ totalSpending: this.state.totalSpending + expAmount })\r\n            }\r\n\r\n            const data = {\r\n                id: this.props.expense.length + 1,\r\n                expdate: expDate,\r\n                expname: expName,\r\n                expamount: expAmount,\r\n                type: typeName\r\n            }\r\n\r\n            this.props.dispatch({\r\n                type: 'ADD_POST',\r\n                data\r\n            });\r\n\r\n            this.setState({ successMsg: true })\r\n\r\n            setTimeout(() => {\r\n                this.setState({ show: false })\r\n            }, 2000);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    deleteExpense = (explist) => {\r\n        this.setState({ totalIncome: 0, totalSpending: 0 })\r\n        this.props.dispatch({ type: 'DELETE_POST', id: explist.id })\r\n        const expenses = this.props.expense;\r\n        for (let i = 0; i < expenses.length; i++) {\r\n            if (expenses[i].type === 'income') {\r\n                this.setState({ totalIncome: this.state.totalIncome + expenses[i].expamount })\r\n            } else if (expenses[i].type === 'spending') {\r\n                this.setState({ totalSpending: this.state.totalSpending + expenses[i].expamount })\r\n            }\r\n        }\r\n    }\r\n\r\n    addIncome = () => {\r\n        this.setState({ show: true, modalTitle: 'Add Income', successMsg: false })\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState({ show: false, modalTitle: '' })\r\n    }\r\n\r\n    addSpending = () => {\r\n        this.setState({ show: true, modalTitle: 'Add Spending', successMsg: false })\r\n    }\r\n\r\n    render() {\r\n\r\n        const totalAmount = this.state.totalIncome - this.state.totalSpending;\r\n\r\n        return (\r\n            <section className=\"exp-section\">\r\n                {/* Header */}\r\n                <section className=\"header-section\">\r\n                    <h6>Balance</h6>\r\n                    <h2>{totalAmount} CZK</h2>\r\n                    <h6><span>Income: {this.state.totalIncome} Kc</span> <span>Spendings: {this.state.totalSpending} Kc</span></h6>\r\n                </section>\r\n\r\n                {/* Expense List */}\r\n                <section className=\"explist-section\">\r\n                    <ul className=\"list-section\">\r\n                        {\r\n                            this.props.expense.map((explist, i) =>\r\n                                <li key={explist.id}>\r\n                                    <div>\r\n                                        <span>{explist.expdate}</span>\r\n                                        <h4 style={{ color: explist.type === 'income' ? 'green' : 'red' }}>{explist.expamount} Kc</h4>\r\n                                    </div>\r\n                                    <div className=\"list-name\">\r\n                                        {explist.expname}\r\n                                    </div>\r\n                                    <div>\r\n                                        <i class=\"fas fa-trash-alt\" onClick={() => this.deleteExpense(explist)}></i>\r\n                                    </div>\r\n\r\n                                </li>\r\n                            )\r\n                        }\r\n\r\n                    </ul>\r\n\r\n                </section>\r\n\r\n\r\n                {/* Footer */}\r\n                <section className=\"footer-section\">\r\n                    <button onClick={this.addIncome}>Add Income</button>\r\n                    <button onClick={this.addSpending}>Add Spending</button>\r\n                </section>\r\n\r\n                {/* Modal Popup */}\r\n\r\n                <section className=\"modal-bg\" style={{ display: this.state.show ? 'flex' : 'none' }}>\r\n                    <section className=\"modal-popup\">\r\n                        <div className=\"modal-header\">\r\n                            <h4>{this.state.modalTitle}</h4>\r\n                            <i class=\"fas fa-times\" onClick={this.closeModal}></i>\r\n                        </div>\r\n                        <form className=\"modal-content\" onSubmit={this.handleSubmit}>\r\n                            <div className=\"field-col\">\r\n                                <label>Expense Date</label>\r\n                                <DatePicker className=\"field-control\"\r\n                                    selected={this.state.startDate}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"field-col\">\r\n                                <label>Expense Name</label>\r\n                                <input type=\"text\" className=\"field-control\" ref={(input) => this.getName = input} required />\r\n                            </div>\r\n                            <div className=\"field-col\">\r\n                                <label>Expense Amount</label>\r\n                                <input type=\"number\" className=\"field-control\" ref={(input) => this.getAmount = input} required />\r\n                            </div>\r\n                            <div className=\"field-col\">\r\n                                <button className=\"btn-success\" disabled={this.state.disabled}>\r\n                                    Save\r\n                             </button>\r\n                                {this.state.successMsg ? <p>Successfully Added</p> : \"\"}\r\n                            </div>\r\n                        </form>\r\n                    </section>\r\n                </section>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(ExpenseList)\r\n","import React, { Component } from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport ExpenseList from \"./expense-list/ExpenseList\";\r\n\r\nexport default class Routes extends Component {\r\n    render() {\r\n        return (\r\n            <Router basename=\"/expenseplanner\">\r\n                <Switch>\r\n                    <Route path=\"/\" exact>\r\n                        <ExpenseList />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n","const data = [\r\n    {\r\n        \"id\": 1,\r\n        \"expdate\": '1.2.2019',\r\n        \"expname\": \"Groceries from Albert\",\r\n        \"expamount\": 1500,\r\n        \"type\": \"spending\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"expdate\": \"12.2.2019\",\r\n        \"expname\": \"Salary from work\",\r\n        \"expamount\": 42000,\r\n        \"type\": \"income\"\r\n    }\r\n]\r\n\r\nconst expReducer = (state = data, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_POST':\r\n            return state.concat([action.data]);\r\n        case 'DELETE_POST':\r\n            return state.filter((expense) => expense.id !== action.id);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default expReducer;","import React from 'react';\nimport Routes from \"./Routes\";\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport expReducer from \"./reducers/index\";\nimport \"./common.scss\";\nconst store = createStore(expReducer);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}